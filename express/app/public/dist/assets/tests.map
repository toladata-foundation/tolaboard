{"version":3,"sources":["tolaboard/tests/adapters/dashboard.jshint.js","tolaboard/tests/adapters/datasource.jshint.js","tolaboard/tests/adapters/graph-option.jshint.js","tolaboard/tests/app.jshint.js","tolaboard/tests/components/graph-builder-widget.jshint.js","tolaboard/tests/components/graphs/chartjs-bar.jshint.js","tolaboard/tests/components/graphs/chartjs-pie.jshint.js","tolaboard/tests/components/graphs/leaflet-map.jshint.js","tolaboard/tests/components/graphs/test-graph.jshint.js","tolaboard/tests/components/json-2-table.jshint.js","tolaboard/tests/components/render-tolaboard-item.jshint.js","tolaboard/tests/components/tolaboard-designer.jshint.js","tolaboard/tests/components/tolaboard-grid.jshint.js","tolaboard/tests/components/tolaboard-item.jshint.js","tolaboard/tests/components/tolaboard-layout.jshint.js","tolaboard/tests/controllers/application.jshint.js","tolaboard/tests/controllers/dashboards.jshint.js","tolaboard/tests/controllers/login.jshint.js","tolaboard/tests/helpers/destroy-app.js","tolaboard/tests/helpers/destroy-app.jshint.js","tolaboard/tests/helpers/is-eq.jshint.js","tolaboard/tests/helpers/module-for-acceptance.js","tolaboard/tests/helpers/module-for-acceptance.jshint.js","tolaboard/tests/helpers/resolver.js","tolaboard/tests/helpers/resolver.jshint.js","tolaboard/tests/helpers/start-app.js","tolaboard/tests/helpers/start-app.jshint.js","tolaboard/tests/initializers/ajax-prefilter.jshint.js","tolaboard/tests/integration/components/graphs/chartjs-bar-test.js","tolaboard/tests/integration/components/graphs/chartjs-bar-test.jshint.js","tolaboard/tests/integration/components/graphs/chartjs-pie-test.js","tolaboard/tests/integration/components/graphs/chartjs-pie-test.jshint.js","tolaboard/tests/integration/components/graphs/leaflet-map-test.js","tolaboard/tests/integration/components/graphs/leaflet-map-test.jshint.js","tolaboard/tests/integration/components/graphs/test-graph-test.js","tolaboard/tests/integration/components/graphs/test-graph-test.jshint.js","tolaboard/tests/integration/components/helpers/graph-builder-widget-test.js","tolaboard/tests/integration/components/helpers/graph-builder-widget-test.jshint.js","tolaboard/tests/integration/components/json-2-table-test.js","tolaboard/tests/integration/components/json-2-table-test.jshint.js","tolaboard/tests/integration/components/render-tolaboard-item-test.js","tolaboard/tests/integration/components/render-tolaboard-item-test.jshint.js","tolaboard/tests/integration/components/render-tolaboard-test.js","tolaboard/tests/integration/components/render-tolaboard-test.jshint.js","tolaboard/tests/integration/components/tolaboard-designer-test.js","tolaboard/tests/integration/components/tolaboard-designer-test.jshint.js","tolaboard/tests/integration/components/tolaboard-grid-test.js","tolaboard/tests/integration/components/tolaboard-grid-test.jshint.js","tolaboard/tests/integration/components/tolaboard-item-test.js","tolaboard/tests/integration/components/tolaboard-item-test.jshint.js","tolaboard/tests/integration/components/tolaboard-layout-test.js","tolaboard/tests/integration/components/tolaboard-layout-test.jshint.js","tolaboard/tests/models/dashboard.jshint.js","tolaboard/tests/models/datasource.jshint.js","tolaboard/tests/models/graph-option.jshint.js","tolaboard/tests/resolver.jshint.js","tolaboard/tests/router.jshint.js","tolaboard/tests/routes/dashboard-view.jshint.js","tolaboard/tests/routes/dashboards.jshint.js","tolaboard/tests/routes/datasources.jshint.js","tolaboard/tests/routes/graph-options.jshint.js","tolaboard/tests/routes/login.jshint.js","tolaboard/tests/routes/mydashboards.jshint.js","tolaboard/tests/routes/sharedboards.jshint.js","tolaboard/tests/services/color-palette.jshint.js","tolaboard/tests/services/data-aggregator.jshint.js","tolaboard/tests/services/session.jshint.js","tolaboard/tests/test-helper.js","tolaboard/tests/test-helper.jshint.js","tolaboard/tests/unit/adapters/dashboard-test.js","tolaboard/tests/unit/adapters/dashboard-test.jshint.js","tolaboard/tests/unit/adapters/dashboards-test.js","tolaboard/tests/unit/adapters/dashboards-test.jshint.js","tolaboard/tests/unit/adapters/data-source-test.js","tolaboard/tests/unit/adapters/data-source-test.jshint.js","tolaboard/tests/unit/adapters/graph-option-test.js","tolaboard/tests/unit/adapters/graph-option-test.jshint.js","tolaboard/tests/unit/controllers/application-test.js","tolaboard/tests/unit/controllers/application-test.jshint.js","tolaboard/tests/unit/helpers/is-eq-test.js","tolaboard/tests/unit/helpers/is-eq-test.jshint.js","tolaboard/tests/unit/initializers/ajax-prefilter-test.js","tolaboard/tests/unit/initializers/ajax-prefilter-test.jshint.js","tolaboard/tests/unit/models/analtyic-component-test.js","tolaboard/tests/unit/models/analtyic-component-test.jshint.js","tolaboard/tests/unit/models/dashboard-test.js","tolaboard/tests/unit/models/dashboard-test.jshint.js","tolaboard/tests/unit/models/data-source-test.js","tolaboard/tests/unit/models/data-source-test.jshint.js","tolaboard/tests/unit/models/graph-option-test.js","tolaboard/tests/unit/models/graph-option-test.jshint.js","tolaboard/tests/unit/routes/dashboards-edit-test.js","tolaboard/tests/unit/routes/dashboards-edit-test.jshint.js","tolaboard/tests/unit/routes/dashboards-test.js","tolaboard/tests/unit/routes/dashboards-test.jshint.js","tolaboard/tests/unit/routes/datasources-test.js","tolaboard/tests/unit/routes/datasources-test.jshint.js","tolaboard/tests/unit/routes/designer-test.js","tolaboard/tests/unit/routes/designer-test.jshint.js","tolaboard/tests/unit/routes/designer/:tolaboard-id-test.js","tolaboard/tests/unit/routes/designer/:tolaboard-id-test.jshint.js","tolaboard/tests/unit/routes/graph-options-test.js","tolaboard/tests/unit/routes/graph-options-test.jshint.js","tolaboard/tests/unit/routes/login-test.js","tolaboard/tests/unit/routes/login-test.jshint.js","tolaboard/tests/unit/routes/mydashboards-test.js","tolaboard/tests/unit/routes/mydashboards-test.jshint.js","tolaboard/tests/unit/routes/sharedboards-test.js","tolaboard/tests/unit/routes/sharedboards-test.jshint.js","tolaboard/tests/unit/routes/vizbuilder-test.js","tolaboard/tests/unit/routes/vizbuilder-test.jshint.js","tolaboard/tests/unit/services/color-palette-test.js","tolaboard/tests/unit/services/color-palette-test.jshint.js","tolaboard/tests/unit/services/data-aggregator-test.js","tolaboard/tests/unit/services/data-aggregator-test.jshint.js","tolaboard/tests/unit/services/dummy-test.js","tolaboard/tests/unit/services/dummy-test.jshint.js","tolaboard/tests/unit/services/session-test.js","tolaboard/tests/unit/services/session-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('tolaboard/tests/adapters/dashboard.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/dashboard.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/dashboard.js should pass jshint.\\nadapters/dashboard.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/dashboard.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/adapters/datasource.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/datasource.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/datasource.js should pass jshint.\\nadapters/datasource.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/datasource.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/adapters/graph-option.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/graph-option.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/graph-option.js should pass jshint.\\nadapters/graph-option.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/graph-option.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('tolaboard/tests/components/graph-builder-widget.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/graph-builder-widget.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/graph-builder-widget.js should pass jshint.\\ncomponents/graph-builder-widget.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/graph-builder-widget.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/graph-builder-widget.js: line 13, col 61, Missing semicolon.\\ncomponents/graph-builder-widget.js: line 79, col 47, Missing semicolon.\\ncomponents/graph-builder-widget.js: line 114, col 87, Missing semicolon.\\ncomponents/graph-builder-widget.js: line 122, col 64, Missing semicolon.\\ncomponents/graph-builder-widget.js: line 191, col 82, Missing semicolon.\\ncomponents/graph-builder-widget.js: line 193, col 53, Missing semicolon.\\n\\n8 errors');\n  });\n});","define('tolaboard/tests/components/graphs/chartjs-bar.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/graphs/chartjs-bar.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/graphs/chartjs-bar.js should pass jshint.\\ncomponents/graphs/chartjs-bar.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/graphs/chartjs-bar.js: line 11, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/components/graphs/chartjs-pie.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/graphs/chartjs-pie.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/graphs/chartjs-pie.js should pass jshint.\\ncomponents/graphs/chartjs-pie.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/graphs/chartjs-pie.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/components/graphs/leaflet-map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/graphs/leaflet-map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/graphs/leaflet-map.js should pass jshint.\\ncomponents/graphs/leaflet-map.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/graphs/leaflet-map.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/components/graphs/test-graph.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/graphs/test-graph.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/graphs/test-graph.js should pass jshint.\\ncomponents/graphs/test-graph.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/graphs/test-graph.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/components/json-2-table.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/json-2-table.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/json-2-table.js should pass jshint.\\ncomponents/json-2-table.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/json-2-table.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/components/render-tolaboard-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/render-tolaboard-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/render-tolaboard-item.js should pass jshint.\\ncomponents/render-tolaboard-item.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/render-tolaboard-item.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/render-tolaboard-item.js: line 71, col 35, [\\'col\\'] is better written in dot notation.\\ncomponents/render-tolaboard-item.js: line 72, col 35, [\\'row\\'] is better written in dot notation.\\ncomponents/render-tolaboard-item.js: line 73, col 38, [\\'size_x\\'] is better written in dot notation.\\ncomponents/render-tolaboard-item.js: line 74, col 38, [\\'size_y\\'] is better written in dot notation.\\n\\n6 errors');\n  });\n});","define('tolaboard/tests/components/tolaboard-designer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/tolaboard-designer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/tolaboard-designer.js should pass jshint.\\ncomponents/tolaboard-designer.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/tolaboard-designer.js: line 8, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/components/tolaboard-grid.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/tolaboard-grid.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/tolaboard-grid.js should pass jshint.\\ncomponents/tolaboard-grid.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/tolaboard-grid.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/tolaboard-grid.js: line 22, col 71, [\\'size_x\\'] is better written in dot notation.\\ncomponents/tolaboard-grid.js: line 22, col 84, [\\'size_y\\'] is better written in dot notation.\\ncomponents/tolaboard-grid.js: line 22, col 97, [\\'col\\'] is better written in dot notation.\\ncomponents/tolaboard-grid.js: line 22, col 107, [\\'row\\'] is better written in dot notation.\\n\\n6 errors');\n  });\n});","define('tolaboard/tests/components/tolaboard-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/tolaboard-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/tolaboard-item.js should pass jshint.\\ncomponents/tolaboard-item.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/tolaboard-item.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/components/tolaboard-layout.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/tolaboard-layout.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/tolaboard-layout.js should pass jshint.\\ncomponents/tolaboard-layout.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/tolaboard-layout.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/tolaboard-layout.js: line 26, col 65, Missing semicolon.\\n\\n3 errors');\n  });\n});","define('tolaboard/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 8, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 9, col 44, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 14, col 24, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 15, col 59, Missing semicolon.\\ncontrollers/application.js: line 16, col 22, Missing semicolon.\\ncontrollers/application.js: line 17, col 15, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 18, col 40, Missing semicolon.\\ncontrollers/application.js: line 19, col 13, Missing semicolon.\\ncontrollers/application.js: line 20, col 11, Missing semicolon.\\ncontrollers/application.js: line 25, col 51, Missing semicolon.\\ncontrollers/application.js: line 30, col 30, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 31, col 55, Missing semicolon.\\ncontrollers/application.js: line 32, col 17, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 33, col 43, Missing semicolon.\\ncontrollers/application.js: line 36, col 48, Missing semicolon.\\ncontrollers/application.js: line 37, col 15, Missing semicolon.\\ncontrollers/application.js: line 73, col 76, Missing semicolon.\\ncontrollers/application.js: line 75, col 47, Missing semicolon.\\ncontrollers/application.js: line 79, col 44, Missing semicolon.\\n\\n21 errors');\n  });\n});","define('tolaboard/tests/controllers/dashboards.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/dashboards.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/dashboards.js should pass jshint.\\ncontrollers/dashboards.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/dashboards.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/controllers/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass jshint.\\ncontrollers/login.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/login.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/login.js: line 53, col 12, Missing semicolon.\\ncontrollers/login.js: line 60, col 21, \\'spread/rest operator\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/login.js: line 69, col 5, Missing semicolon.\\n\\n5 errors');\n  });\n});","define('tolaboard/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('tolaboard/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('tolaboard/tests/helpers/is-eq.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/is-eq.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/is-eq.js should pass jshint.\\nhelpers/is-eq.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/is-eq.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/is-eq.js: line 7, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('tolaboard/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'tolaboard/tests/helpers/start-app', 'tolaboard/tests/helpers/destroy-app'], function (exports, _qunit, _tolaboardTestsHelpersStartApp, _tolaboardTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _tolaboardTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _tolaboardTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('tolaboard/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('tolaboard/tests/helpers/resolver', ['exports', 'tolaboard/resolver', 'tolaboard/config/environment'], function (exports, _tolaboardResolver, _tolaboardConfigEnvironment) {\n\n  var resolver = _tolaboardResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _tolaboardConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _tolaboardConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('tolaboard/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('tolaboard/tests/helpers/start-app', ['exports', 'ember', 'tolaboard/app', 'tolaboard/config/environment'], function (exports, _ember, _tolaboardApp, _tolaboardConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _tolaboardConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _tolaboardApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('tolaboard/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('tolaboard/tests/initializers/ajax-prefilter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/ajax-prefilter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'initializers/ajax-prefilter.js should pass jshint.\\ninitializers/ajax-prefilter.js: line 2, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ninitializers/ajax-prefilter.js: line 11, col 50, Missing semicolon.\\ninitializers/ajax-prefilter.js: line 17, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('tolaboard/tests/integration/components/graphs/chartjs-bar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('graphs/chartjs-bar', 'Integration | Component | graphs/chartjs bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'graphs/chartjs-bar', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'graphs/chartjs-bar', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/graphs/chartjs-bar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/graphs/chartjs-bar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/graphs/chartjs-bar-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/graphs/chartjs-pie-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('graphs/chartjs-pie', 'Integration | Component | graphs/chartjs pie', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'graphs/chartjs-pie', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'graphs/chartjs-pie', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/graphs/chartjs-pie-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/graphs/chartjs-pie-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/graphs/chartjs-pie-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/graphs/leaflet-map-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('graphs/leaflet-map', 'Integration | Component | graphs/leaflet map', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'graphs/leaflet-map', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'graphs/leaflet-map', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/graphs/leaflet-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/graphs/leaflet-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/graphs/leaflet-map-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/graphs/test-graph-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('graphs/test-graph', 'Integration | Component | graphs/test graph', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'graphs/test-graph', ['loc', [null, [1, 0], [1, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'graphs/test-graph', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/graphs/test-graph-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/graphs/test-graph-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/graphs/test-graph-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/helpers/graph-builder-widget-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('helpers/graph-builder-widget', 'Integration | Component | helpers/graph builder widget', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 32\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'helpers/graph-builder-widget', ['loc', [null, [1, 0], [1, 32]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'helpers/graph-builder-widget', [], [], 0, null, ['loc', [null, [2, 4], [4, 37]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/helpers/graph-builder-widget-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/helpers/graph-builder-widget-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/helpers/graph-builder-widget-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/json-2-table-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('json-2-table', 'Integration | Component | json 2 table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'json-2-table', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'json-2-table', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/json-2-table-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/json-2-table-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/json-2-table-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/render-tolaboard-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('render-tolaboard-item', 'Integration | Component | render tolaboard item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 25\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'render-tolaboard-item', ['loc', [null, [1, 0], [1, 25]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'render-tolaboard-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 30]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/render-tolaboard-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/render-tolaboard-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/render-tolaboard-item-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/render-tolaboard-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('render-tolaboard', 'Integration | Component | render tolaboard', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'render-tolaboard', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'render-tolaboard', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/render-tolaboard-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/render-tolaboard-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/render-tolaboard-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-designer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tolaboard-designer', 'Integration | Component | tolaboard designer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tolaboard-designer', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'tolaboard-designer', [], [], 0, null, ['loc', [null, [2, 4], [4, 27]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-designer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/tolaboard-designer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tolaboard-designer-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-grid-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tolaboard-grid', 'Integration | Component | tolaboard grid', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tolaboard-grid', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'tolaboard-grid', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-grid-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/tolaboard-grid-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tolaboard-grid-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tolaboard-item', 'Integration | Component | tolaboard item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tolaboard-item', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'tolaboard-item', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/tolaboard-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tolaboard-item-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-layout-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tolaboard-layout', 'Integration | Component | tolaboard layout', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'tolaboard-layout', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'tolaboard-layout', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('tolaboard/tests/integration/components/tolaboard-layout-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/tolaboard-layout-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tolaboard-layout-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/models/dashboard.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/dashboard.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/dashboard.js should pass jshint.\\nmodels/dashboard.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/dashboard.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/dashboard.js: line 8, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('tolaboard/tests/models/datasource.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/datasource.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/datasource.js should pass jshint.\\nmodels/datasource.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/datasource.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/datasource.js: line 8, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('tolaboard/tests/models/graph-option.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/graph-option.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/graph-option.js should pass jshint.\\nmodels/graph-option.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/graph-option.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/graph-option.js: line 8, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('tolaboard/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 31, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('tolaboard/tests/routes/dashboard-view.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/dashboard-view.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboard-view.js should pass jshint.\\nroutes/dashboard-view.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/dashboard-view.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/routes/dashboards.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/dashboards.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboards.js should pass jshint.\\nroutes/dashboards.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/dashboards.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/routes/datasources.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/datasources.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/datasources.js should pass jshint.\\nroutes/datasources.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/datasources.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/routes/graph-options.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/graph-options.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/graph-options.js should pass jshint.\\nroutes/graph-options.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/graph-options.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/routes/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass jshint.\\nroutes/login.js: line 7, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/login.js: line 8, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/login.js: line 10, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/login.js: line 39, col 21, \\'spread/rest operator\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('tolaboard/tests/routes/mydashboards.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/mydashboards.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/mydashboards.js should pass jshint.\\nroutes/mydashboards.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/mydashboards.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/routes/sharedboards.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/sharedboards.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/sharedboards.js should pass jshint.\\nroutes/sharedboards.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/sharedboards.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/services/color-palette.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/color-palette.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/color-palette.js should pass jshint.\\nservices/color-palette.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/color-palette.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('tolaboard/tests/services/data-aggregator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/data-aggregator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/data-aggregator.js should pass jshint.\\nservices/data-aggregator.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/data-aggregator.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/data-aggregator.js: line 24, col 58, Missing semicolon.\\nservices/data-aggregator.js: line 26, col 82, Missing semicolon.\\n\\n4 errors');\n  });\n});","define('tolaboard/tests/services/session.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/session.js should pass jshint.\\nservices/session.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 10, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/session.js: line 11, col 44, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 19, col 24, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 20, col 51, Missing semicolon.\\nservices/session.js: line 28, col 40, Missing semicolon.\\nservices/session.js: line 57, col 22, Missing semicolon.\\nservices/session.js: line 59, col 15, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 60, col 65, Missing semicolon.\\nservices/session.js: line 61, col 13, Missing semicolon.\\nservices/session.js: line 62, col 11, Missing semicolon.\\nservices/session.js: line 99, col 7, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/session.js: line 100, col 44, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 108, col 24, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 110, col 59, Missing semicolon.\\nservices/session.js: line 118, col 46, Missing semicolon.\\nservices/session.js: line 119, col 41, Missing semicolon.\\nservices/session.js: line 122, col 22, Missing semicolon.\\nservices/session.js: line 124, col 15, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 125, col 28, Missing semicolon.\\nservices/session.js: line 126, col 58, Missing semicolon.\\nservices/session.js: line 128, col 13, Missing semicolon.\\nservices/session.js: line 129, col 11, Missing semicolon.\\nservices/session.js: line 132, col 5, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nservices/session.js: line 133, col 33, Missing semicolon.\\nservices/session.js: line 134, col 45, Missing semicolon.\\nservices/session.js: line 135, col 51, Missing semicolon.\\nservices/session.js: line 136, col 40, Missing semicolon.\\nservices/session.js: line 137, col 40, Missing semicolon.\\nservices/session.js: line 145, col 49, Missing semicolon.\\nservices/session.js: line 156, col 44, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 162, col 24, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 164, col 65, Missing semicolon.\\nservices/session.js: line 179, col 22, Missing semicolon.\\nservices/session.js: line 180, col 15, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nservices/session.js: line 181, col 40, Missing semicolon.\\nservices/session.js: line 183, col 13, Missing semicolon.\\nservices/session.js: line 184, col 11, Missing semicolon.\\n\\n39 errors');\n  });\n});","define('tolaboard/tests/test-helper', ['exports', 'tolaboard/tests/helpers/resolver', 'ember-qunit'], function (exports, _tolaboardTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_tolaboardTestsHelpersResolver['default']);\n});","define('tolaboard/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/adapters/dashboard-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:dashboard', 'Unit | Adapter | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('tolaboard/tests/unit/adapters/dashboard-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/dashboard-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/dashboard-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/adapters/dashboards-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:dashboards', 'Unit | Adapter | dashboards', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('tolaboard/tests/unit/adapters/dashboards-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/dashboards-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/dashboards-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/adapters/data-source-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:data-source', 'Unit | Adapter | data source', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('tolaboard/tests/unit/adapters/data-source-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/data-source-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/data-source-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/adapters/graph-option-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:graph-option', 'Unit | Adapter | graph option', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('tolaboard/tests/unit/adapters/graph-option-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/graph-option-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/graph-option-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('tolaboard/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/helpers/is-eq-test', ['exports', 'tolaboard/helpers/is-eq', 'qunit'], function (exports, _tolaboardHelpersIsEq, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | is eq');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _tolaboardHelpersIsEq.isEq)([42]);\n    assert.ok(result);\n  });\n});","define('tolaboard/tests/unit/helpers/is-eq-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/is-eq-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/is-eq-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/initializers/ajax-prefilter-test', ['exports', 'ember', 'tolaboard/initializers/ajax-prefilter', 'qunit'], function (exports, _ember, _tolaboardInitializersAjaxPrefilter, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | ajax prefilter', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _tolaboardInitializersAjaxPrefilter['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('tolaboard/tests/unit/initializers/ajax-prefilter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/ajax-prefilter-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/ajax-prefilter-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/models/analtyic-component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('analtyic-component', 'Unit | Model | analtyic component', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('tolaboard/tests/unit/models/analtyic-component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/analtyic-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/analtyic-component-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/models/dashboard-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('dashboard', 'Unit | Model | dashboard', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('tolaboard/tests/unit/models/dashboard-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/dashboard-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/dashboard-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/models/data-source-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('data-source', 'Unit | Model | data source', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('tolaboard/tests/unit/models/data-source-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/data-source-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/data-source-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/models/graph-option-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('graph-option', 'Unit | Model | graph option', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('tolaboard/tests/unit/models/graph-option-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/graph-option-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/graph-option-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/dashboards-edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboards-edit', 'Unit | Route | dashboards edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/dashboards-edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/dashboards-edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboards-edit-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/dashboards-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboards', 'Unit | Route | dashboards', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/dashboards-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/dashboards-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboards-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/datasources-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:datasources', 'Unit | Route | datasources', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/datasources-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/datasources-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/datasources-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/designer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:designer', 'Unit | Route | designer', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/designer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/designer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/designer-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/designer/:tolaboard-id-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:designer/:tolaboard-id', 'Unit | Route | designer/:tolaboard id', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/designer/:tolaboard-id-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/designer/:tolaboard-id-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/designer/:tolaboard-id-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/graph-options-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:graph-options', 'Unit | Route | graph options', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/graph-options-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/graph-options-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/graph-options-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/mydashboards-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:mydashboards', 'Unit | Route | mydashboards', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/mydashboards-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/mydashboards-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/mydashboards-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/sharedboards-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:sharedboards', 'Unit | Route | sharedboards', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/sharedboards-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/sharedboards-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sharedboards-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/routes/vizbuilder-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:vizbuilder', 'Unit | Route | vizbuilder', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('tolaboard/tests/unit/routes/vizbuilder-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/vizbuilder-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/vizbuilder-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/services/color-palette-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:color-palette', 'Unit | Service | color palette', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('tolaboard/tests/unit/services/color-palette-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/color-palette-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/color-palette-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/services/data-aggregator-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:data-aggregator', 'Unit | Service | data aggregator', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('tolaboard/tests/unit/services/data-aggregator-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/data-aggregator-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/data-aggregator-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/services/dummy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:dummy', 'Unit | Service | dummy', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('tolaboard/tests/unit/services/dummy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/dummy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/dummy-test.js should pass jshint.');\n  });\n});","define('tolaboard/tests/unit/services/session-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:session', 'Unit | Service | session', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('tolaboard/tests/unit/services/session-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/session-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('tolaboard/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}